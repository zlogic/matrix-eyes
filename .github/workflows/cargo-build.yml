name: Cargo build

on:
  push:
    branches: [ "main", "rust" ]
  pull_request:
    branches: [ "main", "rust" ]

jobs:
  validate:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
    - uses: actions/checkout@v4

    - name: Get current Rust version
      id: get-rust-version
      run: echo VERSION=$(rustc --version | sed s/\ /_/g) >> "$GITHUB_OUTPUT"

    - name: Cache Rust dependencies and artifacts
      id: cache-rust
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git/db
          ${{ github.workspace }}/target
        key: lint-${{ runner.os }}-${{ steps.get-rust-version.outputs.VERSION }}-${{ hashFiles('Cargo.*') }}

    - name: Validate Rust code with clippy
      run: cargo clippy

  build-linux:
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      fail-fast: true
      matrix:
        include:
        - arch: x86_64
          os: ubuntu
          acceleration: tch
        - arch: x86_64
          os: ubuntu
          acceleration: wgpu-spirv
        - arch: aarch64
          os: ubuntu
          acceleration: ndarray

    steps:
    - uses: actions/checkout@v4

    - name: Get current Rust version
      id: get-rust-version
      run: echo VERSION=$(rustc --version | sed s/\ /_/g) >> "$GITHUB_OUTPUT"

    - name: Cache Rust dependencies and artifacts
      id: cache-rust
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git/db
          ${{ github.workspace }}/target
        key: rust-${{ runner.os }}-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.acceleration }}-${{ steps.get-rust-version.outputs.VERSION }}-${{ hashFiles('Cargo.*') }}

    - name: Install compiler and prepare for cross-compilation
      if: matrix.arch == 'aarch64'
      run: |
        rustup target add ${{ matrix.arch }}-unknown-linux-gnu
        sudo apt-get update
        sudo apt-get install -y crossbuild-essential-arm64 qemu-user-static
        echo "LD_LIBRARY_PATH=/usr/aarch64-linux-gnu/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=/usr/bin/aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "CC=/usr/bin/aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "CXX=/usr/bin/aarch64-linux-gnu-g++" >> $GITHUB_ENV
        echo "CFLAGS=-march=armv8.2-a" >> $GITHUB_ENV
        echo "CXXFLAGS=-march=armv8.2-a" >> $GITHUB_ENV

    - name: Install LibTorch
      if: matrix.acceleration == 'tch'
      run: |
        curl -LJ -o libtorch.zip https://download.pytorch.org/libtorch/cu121/libtorch-cxx11-abi-shared-with-deps-2.2.0%2Bcu121.zip
        unzip libtorch.zip
        realpath libtorch >> $GITHUB_PATH
        echo "LD_LIBRARY_PATH=$(realpath libtorch)/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}" >> $GITHUB_ENV

    - name: Build
      run: cargo build --target=${{ matrix.arch }}-unknown-linux-gnu --no-default-features --features=${{ matrix.acceleration }} --release

    - name: Package application
      run: tar -cvjf matrix-eyes-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.acceleration }}.tar.bz2 -C target/${{ matrix.arch }}-unknown-linux-gnu/release matrix-eyes

    - name: Upload application
      uses: actions/upload-artifact@v4
      with:
        name: matrix-eyes-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.acceleration }}
        path: matrix-eyes-*.tar.bz2

  build-windows:
    runs-on: windows-latest
    needs: validate
    strategy:
      fail-fast: true
      matrix:
        include:
        - arch: x86_64
          acceleration: tch
        - arch: x86_64
          acceleration: wgpu-spirv
        - arch: x86_64
          acceleration: ndarray
        - arch: aarch64
          acceleration: ndarray

    steps:
    - uses: actions/checkout@v4

    - name: Get current Rust version
      id: get-rust-version
      run: |
        $version = rustc --version | % {$_.replace(" ","_")}
        echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Cache Rust dependencies and artifacts
      id: cache-rust
      uses: actions/cache@v4
      with:
        path: |
          ~\.cargo\registry\index
          ~\.cargo\registry\cache
          ~\.cargo\git\db
          ${{ github.workspace }}\target
        key: rust-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.acceleration }}-${{ steps.get-rust-version.outputs.VERSION }}-${{ hashFiles('Cargo.*') }}

    - name: Install compiler and prepare for cross-compilation
      if: matrix.arch == 'aarch64'
      run: rustup target add ${{ matrix.arch }}-pc-windows-msvc

    - name: Install LibTorch
      if: matrix.acceleration == 'tch'
      run: |
        Invoke-WebRequest https://download.pytorch.org/libtorch/cu121/libtorch-win-shared-with-deps-2.2.0%2Bcu121.zip -OutFile libtorch.zip
        Expand-Archive -Path libtorch.zip -DestinationPath .
        $torch_path = (Get-Item .\libtorch | Resolve-Path).ProviderPath
        echo "$torch_path\lib" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "LIBTORCH=$torch_path" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Build
      run: |
        cargo build --target=${{ matrix.arch }}-pc-windows-msvc --no-default-features --features=${{ matrix.acceleration }} --release

    - name: Package application
      run: Compress-Archive -Path .\target\${{ matrix.arch }}-pc-windows-msvc\release\matrix-eyes.exe -DestinationPath matrix-eyes-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.acceleration }}.zip

    - name: Upload application
      uses: actions/upload-artifact@v4
      with:
        name: matrix-eyes-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.acceleration }}
        path: matrix-eyes-*.zip

  build-macos:
    runs-on: macos-latest
    needs: validate
    strategy:
      fail-fast: true
      matrix:
        include:
        - arch: x86_64
          acceleration: wgpu
        - arch: x86_64
          acceleration: ndarray-accelerate
        - arch: aarch64
          acceleration: wgpu
        - arch: aarch64
          acceleration: ndarray-accelerate

    steps:
    - uses: actions/checkout@v4

    - name: Get current Rust version
      id: get-rust-version
      run: echo VERSION=$(rustc --version | sed s/\ /_/g) >> "$GITHUB_OUTPUT"

    - name: Cache Rust dependencies and artifacts
      id: cache-rust
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git/db
          ${{ github.workspace }}/target
        key: rust-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.acceleration }}-${{ steps.get-rust-version.outputs.VERSION }}-${{ hashFiles('Cargo.*') }}

    - name: Install compiler and prepare for cross-compilation
      if: matrix.arch == 'x86_64'
      run: rustup target add ${{ matrix.arch }}-apple-darwin

    - name: Build
      run: cargo build --target=${{ matrix.arch }}-apple-darwin --no-default-features --features=${{ matrix.acceleration }} --release

    - name: Package application
      run: tar -cvjf matrix-eyes-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.acceleration }}.tar.bz2 -C target/${{ matrix.arch }}-apple-darwin/release matrix-eyes

    - name: Upload application
      uses: actions/upload-artifact@v4
      with:
        name: matrix-eyes-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.acceleration }}
        path: matrix-eyes-*.tar.bz2

  package:
    runs-on: ubuntu-latest
    needs: [ "build-linux", "build-windows", "build-macos" ]
    steps:
      - name: Merge all applications
        uses: actions/upload-artifact/merge@v4
        with:
          name: matrix-eyes-all
          pattern: matrix-eyes-*
